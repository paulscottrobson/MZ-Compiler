              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2018-11-09 06:11:47
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		8th November 2018
              	;		Purpose :	MZ Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
7EF0:         	StackTop   = 	$7EF0 								; Top of stack
              	
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstCodePage = $22
              	
              	nextreg: 	macro 	port,value 						; set a port value direct.
              				db 		$ED,$91,&port,&value
              				endm
              	
              	nextmema:	macro 									; map the top 16k to page A
              				db 		$ED,$92,$56
              				inc 	a
              				db 		$ED,$92,$57
              				dec 	a
              				endm
              	
8000:         				org 	$8000
8000: 1804    				jr 		Boot
8002: FFFF    				org 	$8004
8004: BB88    				dw 		SystemInformation
              	
8006: ED7BCB88	Boot:		ld 		sp,(SIStack)					; reset Z80 Stack
800A: F3      				di										; enable interrupts
              				nextreg	7,2								; set turbo port (7) to 2 (14Mhz)
800B: ED910702				db 		$ED,$91,7,2
800F: CD9487  				call 	SetScreenMode48kSpectrum 		; set screen mode
8012: 3AC788  				ld 		a,(SIBootCodePage) 				; get the page to start
              				nextmema 								; select that page
8015: ED9256  				db 		$ED,$92,$56
8018: 3C      				inc 	a
8019: ED9257  				db 		$ED,$92,$57
801C: 3D      				dec 	a
801D: 08      				ex 		af,af' 							; set the current code page in A'
801E: 2AC388  				ld 		hl,(SIBootCodeAddress)
8021: E9      				jp 		(hl)
              	
              	
              				include "support/multiply.asm"			; support functions
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		multiply.asm
              	;		Purpose:	16 bit unsigned multiply
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Does HL = HL * DE
              	;
              	; *********************************************************************************
              	
8022:         	MULTMultiply16:
8022: C5      			push 	bc
8023: D5      			push 	de
8024: 44      			ld 		b,h 							; get multipliers in DE/BC
8025: 4D      			ld 		c,l
8026: 210000  			ld 		hl,0 							; zero total
8029:         	__Core__Mult_Loop:
8029: CB41    			bit 	0,c 							; lsb of shifter is non-zero
802B: 2801    			jr 		z,__Core__Mult_Shift
802D: 19      			add 	hl,de 							; add adder to total
802E:         	__Core__Mult_Shift:
802E: CB38    			srl 	b 								; shift BC right.
8030: CB19    			rr 		c
8032: EB      			ex 		de,hl 							; shift DE left
8033: 29      			add 	hl,hl
8034: EB      			ex 		de,hl
8035: 78      			ld 		a,b 							; loop back if BC is nonzero
8036: B1      			or 		c
8037: 20F0    			jr 		nz,__Core__Mult_Loop
8039: D1      			pop 	de
803A: C1      			pop 	bc
803B: C9      			ret
              				include "support/divide.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		divide.asm
              	;		Purpose:	16 bit unsigned divide
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;			Calculates DE / HL. On exit DE = result, HL = remainder
              	;
              	; *********************************************************************************
              	
803C:         	DIVDivideMod16:
              	
803C: C5      		push 	bc
803D: 42      		ld 		b,d 				; DE 
803E: 4B      		ld 		c,e
803F: EB      		ex 		de,hl
8040: 210000  		ld 		hl,0
8043: 78      		ld 		a,b
8044: 0608    		ld 		b,8
8046:         	Div16_Loop1:
8046: 17      		rla
8047: ED6A    		adc 	hl,hl
8049: ED52    		sbc 	hl,de
804B: 3001    		jr 		nc,Div16_NoAdd1
804D: 19      		add 	hl,de
804E:         	Div16_NoAdd1:
804E: 10F6    		djnz 	Div16_Loop1
8050: 17      		rla
8051: 2F      		cpl
8052: 47      		ld 		b,a
8053: 79      		ld 		a,c
8054: 48      		ld 		c,b
8055: 0608    		ld 		b,8
8057:         	Div16_Loop2:
8057: 17      		rla
8058: ED6A    		adc 	hl,hl
805A: ED52    		sbc 	hl,de
805C: 3001    		jr 		nc,Div16_NoAdd2
805E: 19      		add 	hl,de
805F:         	Div16_NoAdd2:
805F: 10F6    		djnz 	Div16_Loop2
8061: 17      		rla
8062: 2F      		cpl
8063: 51      		ld 		d,c
8064: 5F      		ld 		e,a
8065: C1      		pop 	bc
8066: C9      		ret
              			
              			
              				include "support/keyboard.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              		
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              			
8067:         	IOScanKeyboard:
8067: C5      			push 	bc
8068: D5      			push 	de
8069: E5      			push 	hl
              	
806A: 21BC80  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
806D: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
806F: 06FE    			ld 		b,$FE
8071: ED78    			in 		a,(c)
8073: CB47    			bit 	0,a
8075: 2005    			jr 		nz,__kr1
8077: 210C81  			ld 		hl,__kr_shift_table
807A: 180B    			jr 		__kr2
807C:         	__kr1:
807C: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
807E: ED78    			in 		a,(c)
8080: CB4F    			bit 	1,a
8082: 2003    			jr 		nz,__kr2
8084: 21E480  			ld 		hl,__kr_symbol_shift_table
8087:         	__kr2:
              	
8087: 1EFE    			ld 		e,$FE 								; scan pattern.
8089: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
808A: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
808C: FEFE    			cp 		$FE
808E: 2808    			jr 		z,___kr4
8090: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
8092: FE7F    			cp 		$7F
8094: 2802    			jr 		z,___kr4
8096: 161F    			ld 		d,$01F 								; check all bits.
8098:         	___kr4:
8098: 43      			ld 		b,e 								; scan the keyboard
8099: 0EFE    			ld 		c,$FE
809B: ED78    			in 		a,(c)
809D: 2F      			cpl 										; make that active high.
809E: A2      			and 	d  									; and with check value.
809F: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
80A1: 23      			inc 	hl 									; next set of keyboard characters
80A2: 23      			inc 	hl
80A3: 23      			inc 	hl
80A4: 23      			inc 	hl
80A5: 23      			inc 	hl
              	
80A6: 7B      			ld 		a,e 								; get pattern
80A7: 87      			add 	a,a 								; shift left
80A8: F601    			or 		1 									; set bit 1.
80AA: 5F      			ld 		e,a
              	
80AB: FEFF    			cp 		$FF 								; finished when all 1's.
80AD: 20DA    			jr 		nz,__kr3 
80AF: AF      			xor 	a
80B0: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
80B2:         	__kr_keypressed:
80B2: 23      			inc 	hl  								; shift right until carry set
80B3: 1F      			rra
80B4: 30FC    			jr 		nc,__kr_keypressed
80B6: 2B      			dec 	hl 									; undo the last inc hl
80B7: 7E      			ld 		a,(hl) 								; get the character number.
80B8:         	__kr_exit:
80B8: E1      			pop 	hl
80B9: D1      			pop 	de
80BA: C1      			pop 	bc
80BB: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	8:Backspace 13:Return 20-23:Left Down Up Right 
              	;	27:Break 32-95: Std ASCII
              	;
80BC:         	__kr_no_shift_table:
80BC: 005A5843			db 		0,  'Z','X','C','V',			'A','S','D','F','G'
80C0: 56415344	
80C4: 4647    	
80C6: 51574552			db 		'Q','W','E','R','T',			'1','2','3','4','5'
80CA: 54313233	
80CE: 3435    	
80D0: 30393837			db 		'0','9','8','7','6',			'P','O','I','U','Y'
80D4: 36504F49	
80D8: 5559    	
80DA: 0D4C4B4A			db 		13, 'L','K','J','H',			' ', 0, 'M','N','B'
80DE: 4820004D	
80E2: 4E42    	
              	
80E4:         	__kr_symbol_shift_table:
80E4: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
80E8: 2F7E7C5C	
80EC: 7B7D    	
80EE: 0000003C			db 		 0,  0,  0  ,'<','>',			'!','@','#','$','%'
80F2: 3E214023	
80F6: 2425    	
80F8: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
80FC: 26223B00	
8100: 5D5B    	
8102: 0D3D2B2D			db 		13, '=','+','-','^',			' ', 0, '.',',','*'
8106: 5E20002E	
810A: 2C2A    	
              	
810C:         	__kr_shift_table:
810C: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
8110: 2F7E7C5C	
8114: 7B7D    	
8116: 0000003C			db 		0,  0,  0  ,'<','>',			'!','@','#','$',20
811A: 3E214023	
811E: 2414    	
8120: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
8124: 15223B00	
8128: 5D5B    	
812A: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
812E: 5E20002E	
8132: 2C2A    	
              				include "support/drivers/screen48k.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              			
8134:         	SetMode_Spectrum48k:
8134: F5      			push 	af 									; save registers
8135: C5      			push 	bc
              	
8136: 013B12  			ld 		bc,$123B 							; Layer 2 access port
8139: 3E00    			ld 		a,0 								; disable Layer 2
813B: ED79    			out 	(c),a
              			nextreg $15,$3								; Disable LowRes but enable Sprites
813D: ED911503				db 		$ED,$91,$15,$3
              	
8141: 210040  			ld 		hl,$4000 							; clear pixel memory
8144: 3600    	__cs1:	ld 		(hl),0
8146: 23      			inc 	hl
8147: 7C      			ld 		a,h
8148: FE58    			cp 		$58
814A: 20F8    			jr 		nz,__cs1
814C: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
814E: 23      			inc 	hl
814F: 7C      			ld 		a,h
8150: FE5B    			cp 		$5B
8152: 20F8    			jr 		nz,__cs2	
8154: AF      			xor 	a 									; border off
8155: D3FE    			out 	($FE),a
8157: C1      			pop 	bc
8158: F1      			pop 	af
8159: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
815C: 116081  			ld 		de,WriteCharacter_Spectrum48k
815F: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8160:         	WriteCharacter_Spectrum48k:
8160: F5      			push 	af 									; save registers
8161: C5      			push 	bc
8162: D5      			push 	de
8163: E5      			push 	hl
              	
8164: 43      			ld 		b,e 								; character in B
8165: 7C      			ld 		a,h 								; check range.
8166: FE03    			cp 		3
8168: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
816A: E5      			push 	hl 									; save position.
816B: 7C      			ld 		a,h
816C: C658    			add 	$58
816E: 67      			ld 		h,a
              	
816F: 7A      			ld 		a,d 								; get current colour
8170: E607    			and 	7  									; mask 0..2
8172: F640    			or 		$40  								; make bright
8174: 77      			ld 		(hl),a 								; store it.	
8175: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8176: D5      			push 	de
8177: EB      			ex 		de,hl
8178: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8179: 7A      			ld 		a,d
817A: E603    			and 	3
817C: 87      			add 	a,a
817D: 87      			add 	a,a
817E: 87      			add 	a,a
817F: F640    			or 		$40
8181: 67      			ld 		h,a
8182: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8183: E5      			push 	hl
8184: 78      			ld 		a,b 								; get character
8185: E67F    			and 	$7F 								; bits 0-6 only.
8187: D620    			sub 	32
8189: 6F      			ld 		l,a 								; put in HL
818A: 2600    			ld 		h,0
818C: 29      			add 	hl,hl 								; x 8
818D: 29      			add 	hl,hl
818E: 29      			add 	hl,hl
818F: ED5BDF88			ld 		de,(SIFontBase) 					; add the font base.
8193: 19      			add 	hl,de
8194: EB      			ex 		de,hl 								; put in DE (font address)
8195: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8196: 78      			ld 		a,b
8197: 0608    			ld 		b,8 								; copy 8 characters
8199: 0E00    			ld 		c,0 								; XOR value 0
819B: CB7F    			bit 	7,a 								; is the character reversed
819D: 2801    			jr 		z,__ZXWCCopy
819F: 0D      			dec 	c 									; C is the XOR mask now $FF
81A0:         	__ZXWCCopy:
81A0: 1A      			ld 		a,(de)								; get font data
81A1: A9      			xor 	c 									; xor with reverse
81A2: 77      			ld 		(hl),a 								; write back
81A3: 24      			inc 	h 									; bump pointers
81A4: 13      			inc 	de
81A5: 10F9    			djnz 	__ZXWCCopy 							; do B times.
81A7:         	__ZXWCExit:
81A7: E1      			pop 	hl 									; restore and exit
81A8: D1      			pop 	de
81A9: C1      			pop 	bc
81AA: F1      			pop 	af
81AB: C9      			ret
              				include "support/drivers/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
81AC:         	SetMode_Layer2:
81AC: F5      			push 	af
81AD: C5      			push 	bc
81AE: D5      			push 	de
              			nextreg $15,$3								; Disable LowRes but enable Sprites
81AF: ED911503				db 		$ED,$91,$15,$3
              	
81B3: 1E02    			ld 		e,2 								; 3 banks to erase
81B5:         	L2PClear:
81B5: 7B      			ld 		a,e 								; put bank number in bits 6/7
81B6: CB0F    			rrc 	a
81B8: CB0F    			rrc 	a
81BA: F603    			or 		2+1 								; shadow on, visible, enable write paging
81BC: 013B12  			ld 		bc,$123B 							; out to layer 2 port
81BF: ED79    			out 	(c),a
81C1: 210040  			ld 		hl,$4000 							; erase the bank to $00 
81C4:         	L2PClearBank: 										; assume default palette :)
81C4: 2B      			dec 	hl
81C5: 3600    			ld 		(hl),$00
81C7: 7C      			ld 		a,h
81C8: B5      			or 		l
81C9: 20F9    			jr		nz,L2PClearBank
81CB: 1D      			dec 	e
81CC: F2B581  			jp 		p,L2PClear
              	
81CF: AF      			xor 	a
81D0: D3FE    			out 	($FE),a
              	
81D2: D1      			pop 	de
81D3: C1      			pop 	bc
81D4: F1      			pop 	af
81D5: 212018  			ld 		hl,$1820 							; still 32 x 24 	
81D8: 11DC81  			ld 		de,WriteCharacter_Layer2
81DB: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
81DC:         	WriteCharacter_Layer2:
81DC: F5      			push 	af
81DD: C5      			push 	bc
81DE: D5      			push 	de
81DF: E5      			push 	hl
81E0: DDE5    			push 	ix
              	
81E2: 43      			ld 		b,e 								; save A temporarily
81E3: E67F    			and 	$7F
81E5: FE20    			cp 		32
81E7: 3872    			jr 		c,__L2Exit 							; check char in range
81E9: 7C      			ld 		a,h
81EA: FE03    			cp 		3
81EC: 306D    			jr 		nc,__L2Exit 						; check position in range
81EE: 78      			ld 		a,b
              	
81EF: F5      			push 	af 	
81F0: AF      			xor 	a 									; convert colour in C to palette index
81F1: CB42    			bit 	0,d 								; (assumes standard palette)
81F3: 2802    			jr 		z,__L2Not1
81F5: F603    			or 		$03
81F7:         	__L2Not1:
81F7: CB52    			bit 	2,d
81F9: 2802    			jr 		z,__L2Not2
81FB: F61C    			or 		$1C
81FD:         	__L2Not2:
81FD: CB4A    			bit 	1,d
81FF: 2802    			jr 		z,__L2Not3
8201: F6C0    			or 		$C0
8203:         	__L2Not3:
8203: 4F      			ld 		c,a 								; C is foreground
8204: 0600    			ld 		b,0									; B is xor flipper, initially zero
8206: F1      			pop 	af 									; restore char
              	
8207: E5      			push 	hl
8208: CB7F    			bit 	7,a 								; adjust background bit on bit 7
820A: 2802    			jr 		z,__L2NotCursor
820C: 06FF    			ld 		b,$FF 								; light grey is cursor
820E:         	__L2NotCursor:
820E: E67F    			and 	$7F 								; offset from space
8210: D620    			sub 	$20
8212: 6F      			ld 		l,a 								; put into HL
8213: 2600    			ld 		h,0
8215: 29      			add 	hl,hl 								; x 8
8216: 29      			add 	hl,hl
8217: 29      			add 	hl,hl
              	
8218: E5      			push 	hl 									; transfer to IX
8219: DDE1    			pop 	ix
821B: E1      			pop 	hl
              	
821C: C5      			push 	bc 									; add the font base to it.
821D: ED4BDF88			ld 		bc,(SIFontBase)
8221: DD09    			add 	ix,bc
8223: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
8224: C5      			push 	bc
8225: 7C      			ld  	a,h 								; this is the page number.
8226: CB0F    			rrc 	a
8228: CB0F    			rrc 	a
822A: E6C0    			and 	$C0 								; in bits 6 & 7
822C: F603    			or 		$03 								; shadow on, visible, enable write pagin.
822E: 013B12  			ld 		bc,$123B 							; out to layer 2 port
8231: ED79    			out 	(c),a
8233: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
8234: EB      			ex 		de,hl
8235: 6B      			ld 		l,e
8236: 2600    			ld 		h,0
8238: 29      			add 	hl,hl 								
8239: 29      			add 	hl,hl
823A: 29      			add 	hl,hl
823B: CB24    			sla 	h
823D: CB24    			sla 	h
823F: CB24    			sla 	h
              	
8241: 1E08    			ld 		e,8 								; do 8 rows
8243:         	__L2Outer:
8243: E5      			push 	hl 									; save start
8244: 1608    			ld 		d,8 								; do 8 columns
8246: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8249: A8      			xor 	b 									; maybe flip it ?
824A: DD23    			inc 	ix
824C:         	__L2Loop:
824C: 3600    			ld 		(hl),0 								; background
824E: 87      			add 	a,a 								; shift pattern left
824F: 3001    			jr 		nc,__L2NotSet
8251: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8252:         	__L2NotSet:
8252: 23      			inc 	hl
8253: 15      			dec 	d 									; do a row
8254: 20F6    			jr 		nz,	__L2Loop
8256: E1      			pop 	hl 									; restore, go 256 bytes down.
8257: 24      			inc 	h
8258: 1D      			dec 	e 									; do 8 rows
8259: 20E8    			jr 		nz,__L2Outer	
825B:         	__L2Exit:
825B: DDE1    			pop 	ix
825D: E1      			pop 	hl
825E: D1      			pop 	de
825F: C1      			pop 	bc
8260: F1      			pop 	af
8261: C9      			ret
              				include "support/drivers/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		8th November 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8262:         	SetMode_LowRes:
8262: F5      			push 	af
8263: C5      			push 	bc
8264: D5      			push 	de
              	
              			nextreg $15,$83								; Enable LowRes and enable Sprites
8265: ED911583				db 		$ED,$91,$15,$83
8269: AF      			xor 	a 									; layer 2 off.
826A: 013B12  			ld 		bc,$123B 							; out to layer 2 port
826D: ED79    			out 	(c),a
              	
826F: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8272: 110060  			ld 		de,$6000
8275:         	LowClearScreen: 									; assume default palette :)
8275: AF      			xor 	a
8276: 77      			ld 		(hl),a
8277: 12      			ld 		(de),a
8278: 23      			inc 	hl
8279: 13      			inc 	de
827A: 7C      			ld 		a,h
827B: FE58    			cp 		$58
827D: 20F6    			jr		nz,LowClearScreen
827F: AF      			xor 	a
8280: D3FE    			out 	($FE),a
8282: D1      			pop 	de
8283: C1      			pop 	bc
8284: F1      			pop 	af
8285: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8288: 118C82  			ld 		de,LowPrintCharacter
828B: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
828C:         	LowPrintCharacter:
828C: F5      			push 	af
828D: C5      			push 	bc
828E: D5      			push 	de
828F: E5      			push 	hl
8290: DDE5    			push 	ix
              	
8292: 43      			ld 		b,e 								; save character in B
8293: E67F    			and 	$7F
8295: FE20    			cp 		32
8297: 3866    			jr 		c,__LPExit
              	
8299: 29      			add 	hl,hl
829A: 29      			add 	hl,hl
829B: 7C      			ld	 	a,h 								; check in range 192*4 = 768
829C: FE03    			cp 		3
829E: 305F    			jr 		nc,__LPExit
              	
82A0: 7A      			ld 		a,d 								; only lower 3 bits of colour
82A1: E607    			and 	7
82A3: 4F      			ld 		c,a 								; C is foreground
              	
82A4: E5      			push 	hl
82A5: 78      			ld 		a,b 								; get char back
82A6: 0600    			ld 		b,0 								; B = no flip colour.
82A8: CB7F    			bit 	7,a
82AA: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
82AC: 05      			dec 	b
82AD:         	__LowNotReverse:
82AD: E67F    			and 	$7F 								; offset from space
82AF: D620    			sub 	$20
82B1: 6F      			ld 		l,a 								; put into HL
82B2: 2600    			ld 		h,0
82B4: 29      			add 	hl,hl 								; x 8
82B5: 29      			add 	hl,hl
82B6: 29      			add 	hl,hl
              	
82B7: E5      			push 	hl 									; transfer to IX
82B8: DDE1    			pop 	ix
              	
82BA: C5      			push 	bc 									; add the font base to it.
82BB: ED4BDF88			ld 		bc,(SIFontBase)
82BF: DD09    			add 	ix,bc
82C1: C1      			pop 	bc
82C2: E1      			pop 	hl
82C3: EB      			ex 		de,hl
82C4: 7B      			ld 		a,e 								; put DE => HL
82C5: E6C0    			and 	192 								; these are part of Y
82C7: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
82C8: 62      			ld 		h,d		
82C9: 29      			add 	hl,hl
82CA: 29      			add 	hl,hl
82CB: 29      			add 	hl,hl
82CC: 29      			add 	hl,hl
82CD: CBF4    			set 	6,h 								; put into $4000 range
              	
82CF: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
82D1: A3      			and 	e 									; and with E, gives X position
82D2: 87      			add 	a,a 								; now multiplied by 8.
82D3: 5F      			ld 		e,a 								; DE is x offset.
82D4: 1600    			ld 		d,0  
              	
82D6: 19      			add 	hl,de
82D7: 7C      			ld 		a,h
82D8: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
82DA: 3804    			jr 		c,__LowNotLower2
82DC: 110008  			ld 		de,$0800
82DF: 19      			add 	hl,de
82E0:         	__LowNotLower2:
82E0: 1E08    			ld 		e,8 								; do 8 rows
82E2:         	__LowOuter:
82E2: E5      			push 	hl 									; save start
82E3: 1608    			ld 		d,8 								; do 8 columns
82E5: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
82E8: A8      			xor 	b
82E9: DD23    			inc 	ix
82EB:         	__LowLoop:
82EB: 3600    			ld 		(hl),0 								; background
82ED: 87      			add 	a,a 								; shift pattern left
82EE: 3001    			jr 		nc,__LowNotSet
82F0: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
82F1:         	__LowNotSet:
82F1: 2C      			inc 	l
82F2: 15      			dec 	d 									; do a row
82F3: 20F6    			jr 		nz,	__LowLoop
82F5: E1      			pop 	hl 									; restore, go 256 bytes down.
82F6: D5      			push 	de
82F7: 118000  			ld 		de,128
82FA: 19      			add 	hl,de
82FB: D1      			pop 	de
82FC: 1D      			dec 	e 									; do 8 rows
82FD: 20E3    			jr 		nz,__LowOuter	
82FF:         	__LPExit:
82FF: DDE1    			pop 	ix
8301: E1      			pop 	hl
8302: D1      			pop 	de
8303: C1      			pop 	bc
8304: F1      			pop 	af
8305: C9      			ret
              	
              	
8306:         	AlternateFont:
              				include "font.inc"
8306: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
830A: 00000000	
830E: 0C1E1E0C	
8312: 0C000C00	
8316: 36360000	
831A: 00000000	
831E: 36367F36	
8322: 7F363600	
8326: 183E603C	
832A: 067C1800	
832E: 0063660C	
8332: 18336300	
8336: 1C361C3B	
833A: 6E663B00	
833E: 30306000	
8342: 00000000	
8346: 0C183030	
834A: 30180C00	
834E: 30180C0C	
8352: 0C183000	
8356: 00331E7F	
835A: 1E330000	
835E: 0018187E	
8362: 18180000	
8366: 00000000	
836A: 00181830	
836E: 0000007E	
8372: 00000000	
8376: 00000000	
837A: 00181800	
837E: 03060C18	
8382: 30604000	
8386: 3E63676F	
838A: 7B733E00	
838E: 18381818	
8392: 18187E00	
8396: 3C66061C	
839A: 30667E00	
839E: 3C66061C	
83A2: 06663C00	
83A6: 0E1E3666	
83AA: 7F060F00	
83AE: 7E607C06	
83B2: 06663C00	
83B6: 1C30607C	
83BA: 66663C00	
83BE: 7E66060C	
83C2: 18181800	
83C6: 3C66663C	
83CA: 66663C00	
83CE: 3C66663E	
83D2: 060C3800	
83D6: 00181800	
83DA: 00181800	
83DE: 00181800	
83E2: 00181830	
83E6: 0C183060	
83EA: 30180C00	
83EE: 00007E00	
83F2: 007E0000	
83F6: 30180C06	
83FA: 0C183000	
83FE: 3C66060C	
8402: 18001800	
8406: 3E636F6F	
840A: 6F603C00	
840E: 183C6666	
8412: 7E666600	
8416: 7E33333E	
841A: 33337E00	
841E: 1E336060	
8422: 60331E00	
8426: 7C363333	
842A: 33367C00	
842E: 7F31343C	
8432: 34317F00	
8436: 7F31343C	
843A: 34307800	
843E: 1E336060	
8442: 67331F00	
8446: 6666667E	
844A: 66666600	
844E: 3C181818	
8452: 18183C00	
8456: 0F060606	
845A: 66663C00	
845E: 7333363C	
8462: 36337300	
8466: 78303030	
846A: 31337F00	
846E: 63777F7F	
8472: 6B636300	
8476: 63737B6F	
847A: 67636300	
847E: 1C366363	
8482: 63361C00	
8486: 7E33333E	
848A: 30307800	
848E: 3C666666	
8492: 6E3C0E00	
8496: 7E33333E	
849A: 36337300	
849E: 3C667038	
84A2: 0E663C00	
84A6: 7E5A1818	
84AA: 18183C00	
84AE: 66666666	
84B2: 66667E00	
84B6: 66666666	
84BA: 663C1800	
84BE: 6363636B	
84C2: 7F776300	
84C6: 6363361C	
84CA: 1C366300	
84CE: 6666663C	
84D2: 18183C00	
84D6: 7F63460C	
84DA: 19337F00	
84DE: 3C303030	
84E2: 30303C00	
84E6: 6030180C	
84EA: 06030100	
84EE: 3C0C0C0C	
84F2: 0C0C3C00	
84F6: 081C3663	
84FA: 00000000	
84FE: 00000000	
8502: 0000007F	
8506: 18180C00	
850A: 00000000	
850E: 00003C06	
8512: 3E663B00	
8516: 7030303E	
851A: 33336E00	
851E: 00003C66	
8522: 60663C00	
8526: 0E06063E	
852A: 66663B00	
852E: 00003C66	
8532: 7E603C00	
8536: 1C363078	
853A: 30307800	
853E: 00003B66	
8542: 663E067C	
8546: 7030363B	
854A: 33337300	
854E: 18003818	
8552: 18183C00	
8556: 06000606	
855A: 0666663C	
855E: 70303336	
8562: 3C367300	
8566: 38181818	
856A: 18183C00	
856E: 0000667F	
8572: 7F6B6300	
8576: 00007C66	
857A: 66666600	
857E: 00003C66	
8582: 66663C00	
8586: 00006E33	
858A: 333E3078	
858E: 00003B66	
8592: 663E060F	
8596: 00006E3B	
859A: 33307800	
859E: 00003E60	
85A2: 3C067C00	
85A6: 08183E18	
85AA: 181A0C00	
85AE: 00006666	
85B2: 66663B00	
85B6: 00006666	
85BA: 663C1800	
85BE: 0000636B	
85C2: 7F7F3600	
85C6: 00006336	
85CA: 1C366300	
85CE: 00006666	
85D2: 663E067C	
85D6: 00007E4C	
85DA: 18327E00	
85DE: 0E181870	
85E2: 18180E00	
85E6: 0C0C0C00	
85EA: 0C0C0C00	
85EE: 7018180E	
85F2: 18187000	
85F6: 3B6E0000	
85FA: 00000000	
85FE: 00...   	
              	
              	
              				include "__words.asm"
              	; ---------------------------------------------------------
              	; Name : + Type : macro
              	; ---------------------------------------------------------
              	
8606:         	__mzdefine_2b_3a_3a_6d:
8606: 19      	  add  hl,de
8607:         	__mzdefine_2b_3a_3a_6d_end:
8607: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : and Type : word
              	; ---------------------------------------------------------
              	
8608:         	__mzdefine_61_6e_64_3a_3a_77:
8608: 7C      	  ld   a,h
8609: A2      	  and  d
860A: 67      	  ld   h,a
860B: 7D      	  ld   a,l
860C: A3      	  and  e
860D: 6F      	  ld   l,a
860E: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : / Type : word
              	; ---------------------------------------------------------
              	
860F:         	__mzdefine_2f_3a_3a_77:
860F: D5      	  push  de
8610: CD3C80  	  call  DIVDivideMod16
8613: EB      	  ex   de,hl
8614: D1      	  pop  de
8615: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : = Type : word
              	; ---------------------------------------------------------
              	
8616:         	__mzdefine_3d_3a_3a_77:
8616: 7C      	 ld   a,h
8617: BA      	 cp   d
8618: 2008    	 jr   nz,__COMFalse
861A: 7D      	 ld   a,l
861B: BB      	 cp   e
861C: 2004    	 jr   nz,__COMFalse
861E:         	__COMTrue:
861E: 21FFFF  	 ld   hl,$FFFF
8621: C9      	 ret
8622:         	__COMFalse:
8622: 210000  	 ld   hl,$0000
8625: C9      	 ret
              	
              	; ---------------------------------------------------------
              	; Name : > Type : word
              	; ---------------------------------------------------------
              	
8626:         	__mzdefine_3e_3a_3a_77:
8626:         	__COMP_GT:
8626: 7C      	 ld   a,h
8627: AA      	    xor  d
8628: FA3386  	    jp   m,__Greater
862B: ED52    	    sbc  hl,de
862D: DA1E86  	    jp   c,__COMTrue
8630: C32286  	    jp   __COMFalse
8633:         	__Greater:
8633: CB7A    	 bit  7,d
8635: C22286  	    jp   nz,__COMFalse
8638: C31E86  	    jp     __COMTrue
              	
              	; ---------------------------------------------------------
              	; Name : >= Type : word
              	; ---------------------------------------------------------
              	
863B:         	__mzdefine_3e_3d_3a_3a_77:
863B: 2B      	 dec  hl
863C: C32686  	 jp   __COMP_GT
              	
              	; ---------------------------------------------------------
              	; Name : < Type : word
              	; ---------------------------------------------------------
              	
863F:         	__mzdefine_3c_3a_3a_77:
863F: 2B      	 dec  hl
8640: C34386  	 jp   __COMP_LE
              	
              	; ---------------------------------------------------------
              	; Name : <= Type : word
              	; ---------------------------------------------------------
              	
8643:         	__mzdefine_3c_3d_3a_3a_77:
8643:         	__COMP_LE:
8643: 7C      	 ld   a,h
8644: AA      	    xor  d
8645: FA5086  	    jp   m,__LessEqual
8648: ED52    	    sbc  hl,de
864A: D21E86  	    jp   nc,__COMTrue
864D: C32286  	    jp   __COMFalse
8650:         	__LessEqual:
8650: CB7A    	 bit  7,d
8652: CA2286  	    jp   z,__COMFalse
8655: C31E86  	    jp   __COMTrue
              	
              	; ---------------------------------------------------------
              	; Name : mod Type : word
              	; ---------------------------------------------------------
              	
8658:         	__mzdefine_6d_6f_64_3a_3a_77:
8658: D5      	  push  de
8659: CD3C80  	  call  DIVDivideMod16
865C: D1      	  pop  de
865D: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : * Type : word
              	; ---------------------------------------------------------
              	
865E:         	__mzdefine_2a_3a_3a_77:
865E: C32280  	  jp   MULTMultiply16
              	
              	; ---------------------------------------------------------
              	; Name : <> Type : word
              	; ---------------------------------------------------------
              	
8661:         	__mzdefine_3c_3e_3a_3a_77:
8661: 7C      	 ld   a,h
8662: BA      	 cp   d
8663: C21E86  	 jp   nz,__COMTrue
8666: 7D      	 ld   a,l
8667: BB      	 cp   e
8668: C21E86  	 jp   nz,__COMTrue
866B: C32286  	 jp   __COMFalse
              	
              	; ---------------------------------------------------------
              	; Name : or Type : word
              	; ---------------------------------------------------------
              	
866E:         	__mzdefine_6f_72_3a_3a_77:
866E: 7C      	  ld   a,h
866F: B2      	  or   d
8670: 67      	  ld   h,a
8671: 7D      	  ld   a,l
8672: B3      	  or   e
8673: 6F      	  ld   l,a
8674: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : - Type : macro
              	; ---------------------------------------------------------
              	
8675:         	__mzdefine_2d_3a_3a_6d:
8675: D5      	  push  de
8676: EB      	  ex   de,hl
8677: AF      	  xor  a
8678: ED52    	  sbc  hl,de
867A: D1      	  pop  de
867B:         	__mzdefine_2d_3a_3a_6d_end:
867B: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : xor Type : word
              	; ---------------------------------------------------------
              	
867C:         	__mzdefine_78_6f_72_3a_3a_77:
867C: 7C      	  ld   a,h
867D: AA      	  xor   d
867E: 67      	  ld   h,a
867F: 7D      	  ld   a,l
8680: AB      	  xor  e
8681: 6F      	  ld   l,a
8682: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : +! Type : word
              	; ---------------------------------------------------------
              	
8683:         	__mzdefine_2b_21_3a_3a_77:
8683: 7E      	  ld   a,(hl)
8684: 83      	  add  a,e
8685: 77      	  ld   (hl),a
8686: 23      	  inc  hl
8687: 7E      	  ld   a,(hl)
8688: 8A      	  adc  a,d
8689: 77      	  ld   (hl),a
868A: 2B      	  dec  hl
868B: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : @ Type : macro
              	; ---------------------------------------------------------
              	
868C:         	__mzdefine_40_3a_3a_6d:
868C: 7E      	  ld   a,(hl)
868D: 23      	  inc  hl
868E: 66      	  ld   h,(hl)
868F: 6F      	  ld   l,a
8690:         	__mzdefine_40_3a_3a_6d_end:
8690: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : c@ Type : macro
              	; ---------------------------------------------------------
              	
8691:         	__mzdefine_63_40_3a_3a_6d:
8691: 6E      	  ld   l,(hl)
8692: 2600    	  ld   h,0
8694:         	__mzdefine_63_40_3a_3a_6d_end:
8694: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : p@ Type : word
              	; ---------------------------------------------------------
              	
8695:         	__mzdefine_70_40_3a_3a_77:
8695: C5      	  push  bc
8696: 4D      	  ld   c,l
8697: 44      	  ld   b,h
8698: ED68    	  in   l,(c)
869A: 2600    	  ld   h,0
869C: C1      	  pop  bc
869D: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : p! Type : word
              	; ---------------------------------------------------------
              	
869E:         	__mzdefine_70_21_3a_3a_77:
869E: C5      	  push  bc
869F: 4D      	  ld   c,l
86A0: 44      	  ld   b,h
86A1: ED59    	  out  (c),e
86A3: C1      	  pop  bc
86A4: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : ! Type : macro
              	; ---------------------------------------------------------
              	
86A5:         	__mzdefine_21_3a_3a_6d:
86A5: 73      	  ld   (hl),e
86A6: 23      	  inc  hl
86A7: 72      	  ld   (hl),d
86A8: 2B      	  dec  hl
86A9:         	__mzdefine_21_3a_3a_6d_end:
86A9: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : c! Type : macro
              	; ---------------------------------------------------------
              	
86AA:         	__mzdefine_63_21_3a_3a_6d:
86AA: 73      	  ld   (hl),e
86AB:         	__mzdefine_63_21_3a_3a_6d_end:
86AB: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : break protected Type : macro
              	; ---------------------------------------------------------
              	
86AC:         	__mzdefine_62_72_65_61_6b_3a_3a_6d_70:
86AC: DD01    	  db   $DD,$01
86AE:         	__mzdefine_62_72_65_61_6b_3a_3a_6d_70_end:
86AE: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : copy Type : word
              	; ---------------------------------------------------------
              	
86AF:         	__mzdefine_63_6f_70_79_3a_3a_77:
86AF: 78      	  ld   a,b         ; nothing to do.
86B0: B1      	  or   c
86B1: C8      	  ret  z
86B2: C5      	  push  bc
86B3: D5      	  push  de
86B4: E5      	  push  hl
86B5: AF      	  xor  a          ; find direction.
86B6: ED52    	  sbc  hl,de
86B8: 7C      	  ld   a,h
86B9: 19      	  add  hl,de
86BA: CB7F    	  bit  7,a         ; if +ve use LDDR
86BC: 2807    	  jr   z,__copy2
86BE: EB      	  ex   de,hl         ; LDIR etc do (DE) <- (HL)
86BF: EDB0    	  ldir
86C1:         	__copyExit:
86C1: E1      	  pop  hl
86C2: D1      	  pop  de
86C3: C1      	  pop  bc
86C4: C9      	  ret
86C5:         	__copy2:
86C5: 09      	  add  hl,bc         ; add length to HL,DE, swap as LDDR does (DE) <- (HL)
86C6: EB      	  ex   de,hl
86C7: 09      	  add  hl,bc
86C8: 1B      	  dec  de          ; -1 to point to last byte
86C9: 2B      	  dec  hl
86CA: EDB8    	  lddr
86CC: 18F3    	  jr   __copyExit
              	
              	; ---------------------------------------------------------
              	; Name : debug Type : word
              	; ---------------------------------------------------------
              	
86CE:         	__mzdefine_64_65_62_75_67_3a_3a_77:
86CE:         	DebugShow:
86CE: C5      	  push  bc
86CF: D5      	  push  de
86D0: E5      	  push  hl
86D1: C5      	  push  bc
86D2: D5      	  push  de
86D3: E5      	  push  hl
86D4: 3AD788  	  ld   a,(SIScreenHeight)     ; on the bottom line
86D7: 3D      	  dec  a
86D8: 5F      	  ld  e,a
86D9: 1600    	  ld  d,0
86DB: 62      	  ld   h,d
86DC: 3AD388  	  ld   a,(SIScreenWidth)
86DF: 6F      	  ld   l,a
86E0: CD2280  	  call  MULTMultiply16
86E3: D1      	  pop  de          ; display A
86E4: 0E41    	  ld   c,'A'
86E6: CDF986  	  call  __DisplayHexInteger
86E9: D1      	  pop  de          ; display B
86EA: 0E42    	  ld   c,'B'
86EC: CDF986  	  call  __DisplayHexInteger
86EF: D1      	  pop  de          ; display B
86F0: 0E43    	  ld   c,'C'
86F2: CDF986  	  call  __DisplayHexInteger
86F5: E1      	  pop  hl
86F6: D1      	  pop  de
86F7: C1      	  pop  bc
86F8: C9      	  ret
86F9:         	__DisplayHexInteger:
86F9: D5      	  push  de
86FA: 1605    	  ld   d,5
86FC: 59      	  ld   e,c
86FD: CBFB    	  set  7,e
86FF: CDE987  	  call  WriteCharacter
8702: 23      	  inc  hl
8703: D1      	  pop  de
8704: 7A      	  ld   a,d
8705: CD0987  	  call  __DisplayHexByte
8708: 7B      	  ld   a,e
8709:         	__DisplayHexByte:
8709: F5      	  push  af
870A: CB0F    	  rrc  a
870C: CB0F    	  rrc  a
870E: CB0F    	  rrc  a
8710: CB0F    	  rrc  a
8712: CD1687  	  call  __DisplayHexNibble
8715: F1      	  pop  af
8716:         	__DisplayHexNibble:
8716: D5      	  push  de
8717: 1604    	  ld   d,4
8719: E60F    	  and  15
871B: FE0A    	  cp   10
871D: 3802    	  jr   c,__DHN2
871F: C607    	  add  a,7
8721: C630    	__DHN2: add  a,48
8723: 5F      	  ld   e,a
8724: CDE987  	  call  WriteCharacter
8727: 23      	  inc  hl
8728: D1      	  pop  de
8729: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : .hex Type : word
              	; ---------------------------------------------------------
              	
872A:         	__mzdefine_2e_68_65_78_3a_3a_77:
872A:         	PrintHexWord:
872A: 3E20    	  ld   a,' '
872C: CD6B87  	  call  PrintCharacter
872F: 7C      	  ld   a,h
8730: CD3887  	  call  PrintHexByte
8733: 7D      	  ld   a,l
8734: CD3887  	  call  PrintHexByte
8737: C9      	  ret
              	; *********************************************************************************
              	;
              	;        Print A in hexadecimal
              	;
              	; *********************************************************************************
8738:         	PrintHexByte:
8738: F5      	  push  af
8739: CB0F    	  rrc  a
873B: CB0F    	  rrc  a
873D: CB0F    	  rrc  a
873F: CB0F    	  rrc  a
8741: CD4587  	  call  __PrintNibble
8744: F1      	  pop  af
8745:         	__PrintNibble:
8745: E60F    	  and  15
8747: FE0A    	  cp   10
8749: 3802    	  jr   c,__PNIsDigit
874B: C607    	  add  7
874D:         	__PNIsDigit:
874D: C630    	  add  48
874F: C36B87  	  jp   PrintCharacter
              	
              	; ---------------------------------------------------------
              	; Name : fill Type : word
              	; ---------------------------------------------------------
              	
8752:         	__mzdefine_66_69_6c_6c_3a_3a_77:
8752: 78      	  ld   a,b         ; nothing to do.
8753: B1      	  or   c
8754: C8      	  ret  z
8755: C5      	  push bc
8756: E5      	  push  hl
8757: 73      	__fill1:ld   (hl),e
8758: 23      	  inc  hl
8759: 0B      	  dec  bc
875A: 78      	  ld   a,b
875B: B1      	  or   c
875C: 20F9    	  jr   nz,__fill1
875E: E1      	  pop  hl
875F: C1      	  pop  bc
8760: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : halt Type : word
              	; ---------------------------------------------------------
              	
8761:         	__mzdefine_68_61_6c_74_3a_3a_77:
8761:         	HaltZ80:
8761: F3      	  di
8762: 76      	  halt
8763: 18FC    	  jr   HaltZ80
              	
              	; ---------------------------------------------------------
              	; Name : io.colour Type : word
              	; ---------------------------------------------------------
              	
8765:         	__mzdefine_69_6f_2e_63_6f_6c_6f_75_72_3a_3a_77:
8765: 6F      	  ld   l,a
8766: 32E588  	  ld   (IOColour),a
8769: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : io.emit Type : word
              	; ---------------------------------------------------------
              	
876A:         	__mzdefine_69_6f_2e_65_6d_69_74_3a_3a_77:
876A: 7D      	  ld   a,l
876B:         	PrintCharacter:
876B: D5      	  push  de
876C: E5      	  push  hl
876D: 5F      	  ld   e,a
876E: 3AE588  	  ld   a,(IOColour)
8771: 57      	  ld   d,a
8772: 2AE388  	  ld   hl,(IOScreenPosition)
8775: CDE987  	  call  WriteCharacter
8778: 23      	  inc  hl
8779: 22E388  	  ld   (IOScreenPosition),hl
877C: E1      	  pop  hl
877D: D1      	  pop  de
877E: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : io.print.string Type : word
              	; ---------------------------------------------------------
              	
877F:         	__mzdefine_69_6f_2e_70_72_69_6e_74_2e_73_74_72_69_6e_67_3a_3a_77:
877F:         	PrintString:
877F: E5      	  push  hl
8780:         	__IOASCIIZ:
8780: 7E      	  ld   a,(hl)
8781: B7      	  or   a
8782: 2806    	  jr   z,__IOASCIIExit
8784: CD6B87  	  call PrintCharacter
8787: 23      	  inc  hl
8788: 18F6    	  jr   __IOASCIIZ
878A:         	__IOASCIIExit:
878A: E1      	  pop  hl
878B: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : inkey Type : word
              	; ---------------------------------------------------------
              	
878C:         	__mzdefine_69_6e_6b_65_79_3a_3a_77:
878C: EB      	  ex   de,hl
878D: CD6780  	  call  IOScanKeyboard
8790: 6F      	  ld   l,a
8791: 2600    	  ld   h,0
8793: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : screen.mode.48k Type : word
              	; ---------------------------------------------------------
              	
8794:         	__mzdefine_73_63_72_65_65_6e_2e_6d_6f_64_65_2e_34_38_6b_3a_3a_77:
8794:         	SetScreenMode48kSpectrum:
8794: D5      	  push  de
8795: E5      	  push  hl
8796: CD3481  	  call  SetMode_Spectrum48k
8799: ED53DB88	  ld  (SIScreenDriver),de
879D: 7D      	  ld   a,l
879E: 32D388  	  ld   (SIScreenWidth),a
87A1: 7C      	  ld   a,h
87A2: 32D788  	  ld   (SIScreenHeight),a
87A5: 210000  	  ld   hl,0
87A8: 22E388  	  ld   (IOScreenPosition),hl
87AB: E1      	  pop  hl
87AC: D1      	  pop  de
87AD: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : screen.mode.layer2 Type : word
              	; ---------------------------------------------------------
              	
87AE:         	__mzdefine_73_63_72_65_65_6e_2e_6d_6f_64_65_2e_6c_61_79_65_72_32_3a_3a_77:
87AE:         	SetScreenModeLayer2:
87AE: D5      	  push  de
87AF: E5      	  push  hl
87B0: CDAC81  	  call  SetMode_Layer2
87B3: ED53DB88	  ld  (SIScreenDriver),de
87B7: 7D      	  ld   a,l
87B8: 32D388  	  ld   (SIScreenWidth),a
87BB: 7C      	  ld   a,h
87BC: 32D788  	  ld   (SIScreenHeight),a
87BF: 210000  	  ld   hl,0
87C2: 22E388  	  ld   (IOScreenPosition),hl
87C5: E1      	  pop  hl
87C6: D1      	  pop  de
87C7: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : screen.mode.lowres Type : word
              	; ---------------------------------------------------------
              	
87C8:         	__mzdefine_73_63_72_65_65_6e_2e_6d_6f_64_65_2e_6c_6f_77_72_65_73_3a_3a_77:
87C8:         	SetScreenModeLowRes:
87C8: D5      	  push  de
87C9: E5      	  push  hl
87CA: CD6282  	  call  SetMode_LowRes
87CD: ED53DB88	  ld  (SIScreenDriver),de
87D1: 7D      	  ld   a,l
87D2: 32D388  	  ld   (SIScreenWidth),a
87D5: 7C      	  ld   a,h
87D6: 32D788  	  ld   (SIScreenHeight),a
87D9: 210000  	  ld   hl,0
87DC: 22E388  	  ld   (IOScreenPosition),hl
87DF: E1      	  pop  hl
87E0: D1      	  pop  de
87E1: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : ; protected Type : macro
              	; ---------------------------------------------------------
              	
87E2:         	__mzdefine_3b_3a_3a_6d_70:
87E2: C9      	  ret
87E3:         	__mzdefine_3b_3a_3a_6d_70_end:
87E3: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : sys.info Type : word
              	; ---------------------------------------------------------
              	
87E4:         	__mzdefine_73_79_73_2e_69_6e_66_6f_3a_3a_77:
87E4: EB      	  ex   de,hl
87E5: 21BB88  	  ld   hl,SystemInformation
87E8: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : io.write.character Type : word
              	; ---------------------------------------------------------
              	
87E9:         	__mzdefine_69_6f_2e_77_72_69_74_65_2e_63_68_61_72_61_63_74_65_72_3a_3a_77:
87E9:         	WriteCharacter:
87E9: C5      	  push  bc
87EA: D5      	  push  de
87EB: E5      	  push  hl
87EC: 01F687  	  ld   bc,__WCContinue
87EF: C5      	  push  bc
87F0: ED4BDB88	  ld   bc,(SIScreenDriver)
87F4: C5      	  push  bc
87F5: C9      	  ret
87F6:         	__WCContinue:
87F6: E1      	  pop  hl
87F7: D1      	  pop  de
87F8: C1      	  pop  bc
87F9: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : abc>r protected Type : macro
              	; ---------------------------------------------------------
              	
87FA:         	__mzdefine_61_62_63_3e_72_3a_3a_6d_70:
87FA: C5      	 push  bc
87FB: D5      	 push  de
87FC: E5      	 push  hl
87FD:         	__mzdefine_61_62_63_3e_72_3a_3a_6d_70_end:
87FD: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : ab>r protected Type : macro
              	; ---------------------------------------------------------
              	
87FE:         	__mzdefine_61_62_3e_72_3a_3a_6d_70:
87FE: D5      	 push  de
87FF: E5      	 push  hl
8800:         	__mzdefine_61_62_3e_72_3a_3a_6d_70_end:
8800: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : a>b Type : macro
              	; ---------------------------------------------------------
              	
8801:         	__mzdefine_61_3e_62_3a_3a_6d:
8801: 54      	 ld   d,h
8802: 5D      	 ld   e,l
8803:         	__mzdefine_61_3e_62_3a_3a_6d_end:
8803: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : a>c Type : macro
              	; ---------------------------------------------------------
              	
8804:         	__mzdefine_61_3e_63_3a_3a_6d:
8804: 44      	 ld   b,h
8805: 4D      	 ld   c,l
8806:         	__mzdefine_61_3e_63_3a_3a_6d_end:
8806: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : a>r protected Type : macro
              	; ---------------------------------------------------------
              	
8807:         	__mzdefine_61_3e_72_3a_3a_6d_70:
8807: E5      	 push  hl
8808:         	__mzdefine_61_3e_72_3a_3a_6d_70_end:
8808: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : b>a Type : macro
              	; ---------------------------------------------------------
              	
8809:         	__mzdefine_62_3e_61_3a_3a_6d:
8809: 62      	 ld   h,d
880A: 6B      	 ld   l,e
880B:         	__mzdefine_62_3e_61_3a_3a_6d_end:
880B: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : b>c Type : macro
              	; ---------------------------------------------------------
              	
880C:         	__mzdefine_62_3e_63_3a_3a_6d:
880C: 42      	 ld   b,d
880D: 4B      	 ld   c,e
880E:         	__mzdefine_62_3e_63_3a_3a_6d_end:
880E: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : b>r protected Type : macro
              	; ---------------------------------------------------------
              	
880F:         	__mzdefine_62_3e_72_3a_3a_6d_70:
880F: D5      	 push  de
8810:         	__mzdefine_62_3e_72_3a_3a_6d_70_end:
8810: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : c>a Type : macro
              	; ---------------------------------------------------------
              	
8811:         	__mzdefine_63_3e_61_3a_3a_6d:
8811: 60      	 ld   h,b
8812: 69      	 ld   l,c
8813:         	__mzdefine_63_3e_61_3a_3a_6d_end:
8813: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : c>b Type : macro
              	; ---------------------------------------------------------
              	
8814:         	__mzdefine_63_3e_62_3a_3a_6d:
8814: 50      	 ld   d,b
8815: 59      	 ld   e,c
8816:         	__mzdefine_63_3e_62_3a_3a_6d_end:
8816: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : c>r protected Type : macro
              	; ---------------------------------------------------------
              	
8817:         	__mzdefine_63_3e_72_3a_3a_6d_70:
8817: C5      	 push  bc
8818:         	__mzdefine_63_3e_72_3a_3a_6d_70_end:
8818: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : r>a protected Type : macro
              	; ---------------------------------------------------------
              	
8819:         	__mzdefine_72_3e_61_3a_3a_6d_70:
8819: E1      	 pop  hl
881A:         	__mzdefine_72_3e_61_3a_3a_6d_70_end:
881A: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : r>ab protected Type : macro
              	; ---------------------------------------------------------
              	
881B:         	__mzdefine_72_3e_61_62_3a_3a_6d_70:
881B: E1      	 pop  hl
881C: D1      	 pop  de
881D:         	__mzdefine_72_3e_61_62_3a_3a_6d_70_end:
881D: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : r>abc protected Type : macro
              	; ---------------------------------------------------------
              	
881E:         	__mzdefine_72_3e_61_62_63_3a_3a_6d_70:
881E: E1      	 pop  hl
881F: D1      	 pop  de
8820: C1      	 pop  bc
8821:         	__mzdefine_72_3e_61_62_63_3a_3a_6d_70_end:
8821: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : r>b protected Type : macro
              	; ---------------------------------------------------------
              	
8822:         	__mzdefine_72_3e_62_3a_3a_6d_70:
8822: D1      	 pop  de
8823:         	__mzdefine_72_3e_62_3a_3a_6d_70_end:
8823: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : r>c protected Type : macro
              	; ---------------------------------------------------------
              	
8824:         	__mzdefine_72_3e_63_3a_3a_6d_70:
8824: C1      	 pop  bc
8825:         	__mzdefine_72_3e_63_3a_3a_6d_70_end:
8825: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : swap Type : macro
              	; ---------------------------------------------------------
              	
8826:         	__mzdefine_73_77_61_70_3a_3a_6d:
8826: EB      	 ex   de,hl
8827:         	__mzdefine_73_77_61_70_3a_3a_6d_end:
8827: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 0= Type : word
              	; ---------------------------------------------------------
              	
8828:         	__mzdefine_30_3d_3a_3a_77:
8828: 7C      	  ld  a,h
8829: B5      	  or  l
882A: 210000  	  ld  hl,$0000
882D: C0      	  ret nz
882E: 2B      	  dec hl
882F: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 0< Type : word
              	; ---------------------------------------------------------
              	
8830:         	__mzdefine_30_3c_3a_3a_77:
8830: CB7C    	  bit 7,h
8832: 210000  	  ld  hl,$0000
8835: C8      	  ret z
8836: 2B      	  dec hl
8837: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 0- Type : word
              	; ---------------------------------------------------------
              	
8838:         	__mzdefine_30_2d_3a_3a_77:
8838: 7C      	  ld  a,h
8839: 2F      	  cpl
883A: 67      	  ld  h,a
883B: 7D      	  ld  a,l
883C: 2F      	  cpl
883D: 6F      	  ld  l,a
883E: 23      	  inc hl
883F: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 16/ Type : word
              	; ---------------------------------------------------------
              	
8840:         	__mzdefine_31_36_2f_3a_3a_77:
8840: CB2C    	  sra  h
8842: CB1D    	  rr   l
8844: CB2C    	  sra  h
8846: CB1D    	  rr   l
8848: CB2C    	  sra  h
884A: CB1D    	  rr   l
884C: CB2C    	  sra  h
884E: CB1D    	  rr   l
8850: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 16* Type : macro
              	; ---------------------------------------------------------
              	
8851:         	__mzdefine_31_36_2a_3a_3a_6d:
8851: 29      	  add  hl,hl
8852: 29      	  add  hl,hl
8853: 29      	  add  hl,hl
8854: 29      	  add  hl,hl
8855:         	__mzdefine_31_36_2a_3a_3a_6d_end:
8855: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 1- Type : macro
              	; ---------------------------------------------------------
              	
8856:         	__mzdefine_31_2d_3a_3a_6d:
8856: 2B      	  dec hl
8857:         	__mzdefine_31_2d_3a_3a_6d_end:
8857: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 1+ Type : macro
              	; ---------------------------------------------------------
              	
8858:         	__mzdefine_31_2b_3a_3a_6d:
8858: 23      	  inc hl
8859:         	__mzdefine_31_2b_3a_3a_6d_end:
8859: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 256/ Type : word
              	; ---------------------------------------------------------
              	
885A:         	__mzdefine_32_35_36_2f_3a_3a_77:
885A: 6C      	  ld   l,h
885B: 2600    	  ld   h,0
885D: CB7C    	  bit  7,h
885F: C8      	  ret  z
8860: 25      	  dec  h
8861: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 256* Type : macro
              	; ---------------------------------------------------------
              	
8862:         	__mzdefine_32_35_36_2a_3a_3a_6d:
8862: 65      	  ld   h,l
8863: 2E00    	  ld   l,0
8865:         	__mzdefine_32_35_36_2a_3a_3a_6d_end:
8865: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 2/ Type : macro
              	; ---------------------------------------------------------
              	
8866:         	__mzdefine_32_2f_3a_3a_6d:
8866: CB2C    	  sra  h
8868: CB1D    	  rr   l
886A:         	__mzdefine_32_2f_3a_3a_6d_end:
886A: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 2- Type : macro
              	; ---------------------------------------------------------
              	
886B:         	__mzdefine_32_2d_3a_3a_6d:
886B: 2B      	  dec hl
886C: 2B      	  dec hl
886D:         	__mzdefine_32_2d_3a_3a_6d_end:
886D: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 2+ Type : macro
              	; ---------------------------------------------------------
              	
886E:         	__mzdefine_32_2b_3a_3a_6d:
886E: 23      	  inc hl
886F: 23      	  inc hl
8870:         	__mzdefine_32_2b_3a_3a_6d_end:
8870: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 2* Type : macro
              	; ---------------------------------------------------------
              	
8871:         	__mzdefine_32_2a_3a_3a_6d:
8871: 29      	  add  hl,hl
8872:         	__mzdefine_32_2a_3a_3a_6d_end:
8872: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 4/ Type : word
              	; ---------------------------------------------------------
              	
8873:         	__mzdefine_34_2f_3a_3a_77:
8873: CB2C    	  sra  h
8875: CB1D    	  rr   l
8877: CB2C    	  sra  h
8879: CB1D    	  rr   l
887B: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 4* Type : macro
              	; ---------------------------------------------------------
              	
887C:         	__mzdefine_34_2a_3a_3a_6d:
887C: 29      	  add  hl,hl
887D: 29      	  add  hl,hl
887E:         	__mzdefine_34_2a_3a_3a_6d_end:
887E: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : 8* Type : macro
              	; ---------------------------------------------------------
              	
887F:         	__mzdefine_38_2a_3a_3a_6d:
887F: 29      	  add  hl,hl
8880: 29      	  add  hl,hl
8881: 29      	  add  hl,hl
8882:         	__mzdefine_38_2a_3a_3a_6d_end:
8882: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : abs Type : word
              	; ---------------------------------------------------------
              	
8883:         	__mzdefine_61_62_73_3a_3a_77:
8883: CB7C    	  bit 7,h
8885: C8      	  ret z
8886: 7C      	  ld  a,h
8887: 2F      	  cpl
8888: 67      	  ld  h,a
8889: 7D      	  ld  a,l
888A: 2F      	  cpl
888B: 6F      	  ld  l,a
888C: 23      	  inc hl
888D: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : bswap Type : macro
              	; ---------------------------------------------------------
              	
888E:         	__mzdefine_62_73_77_61_70_3a_3a_6d:
888E: 7D      	  ld   a,l
888F: 6C      	  ld   l,h
8890: 67      	  ld   h,a
8891:         	__mzdefine_62_73_77_61_70_3a_3a_6d_end:
8891: C9      	  ret
              	
              	; ---------------------------------------------------------
              	; Name : max Type : word
              	; ---------------------------------------------------------
              	
8892:         	__mzdefine_6d_61_78_3a_3a_77:
8892: 7C      	 ld   a,h
8893: AA      	    xor  d
8894: FA9E88  	    jp   m,__Max2
8897: E5      	    push  hl
8898: ED52    	    sbc  hl,de
889A: E1      	    pop  hl
889B: D0      	    ret  nc
889C: EB      	    ex   de,hl
889D: C9      	    ret
889E:         	__Max2:
889E: CB7C    	 bit  7,h
88A0: C8      	 ret  z
88A1: EB      	 ex   de,hl
88A2: C9      	 ret
              	
              	; ---------------------------------------------------------
              	; Name : min Type : word
              	; ---------------------------------------------------------
              	
88A3:         	__mzdefine_6d_69_6e_3a_3a_77:
88A3: 7C      	 ld   a,h
88A4: AA      	    xor  d
88A5: FAAF88  	    jp   m,__Min2
88A8: E5      	    push  hl
88A9: ED52    	    sbc  hl,de
88AB: E1      	    pop  hl
88AC: D8      	    ret  c
88AD: EB      	    ex   de,hl
88AE: C9      	    ret
88AF:         	__Min2:
88AF: CB7C    	 bit  7,h
88B1: C0      	 ret  nz
88B2: EB      	 ex   de,hl
88B3: C9      	 ret
              	
              	; ---------------------------------------------------------
              	; Name : not Type : word
              	; ---------------------------------------------------------
              	
88B4:         	__mzdefine_6e_6f_74_3a_3a_77:
88B4: 7C      	  ld  a,h
88B5: 2F      	  cpl
88B6: 67      	  ld  h,a
88B7: 7D      	  ld  a,l
88B8: 2F      	  cpl
88B9: 6F      	  ld  l,a
88BA: C9      	  ret
              	
              				include "data.asm"		
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		8th November 2018
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;									System Information
              	;
              	; ***************************************************************************************
              	
88BB:         	SystemInformation:
              	
88BB:         	SINextFreeCode: 									; +0 	Next Free Code Byte
88BB: 00A00000			dw 		FreeMemory,0
88BF:         	SINextFreeCodePage: 								; +4 	Next Free Code Byte Page
88BF: 22000000			dw 		FirstCodePage,0
88C3:         	SIBootCodeAddress:									; +8	Run from here
88C3: 61870000			dw 		HaltZ80,0
88C7:         	SIBootCodePage: 									; +12   Run page.
88C7: 22000000			db		FirstCodePage,0,0,0
88CB:         	SIStack:											; +xx 	Initial stack value
88CB: F07E0000			dw 		StackTop,0							
88CF:         	SIPageUsage:										; +xx 	Page Usage Table
88CF: E6880000			dw 		PageUsage,0 			
88D3:         	SIScreenWidth:										; +xx 	Screen Width
88D3: 00000000			dw 		0,0
88D7:         	SIScreenHeight:										; +xx 	Screen Height
88D7: 00000000			dw 		0,0
88DB:         	SIScreenDriver:										; +xx 	Screen Driver
88DB: 00000000			dw 		0,0 								
88DF:         	SIFontBase:											; +xx 	768 byte font, begins with space
88DF: 06830000			dw 		AlternateFont,0 							
              			
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
88E3:         	IOScreenPosition:									; Position on screen
88E3: 0000    			dw 		0
88E5:         	IOColour: 											; writing colour
88E5: 07      			db 		7
              	
88E6:         	PageUsage:
88E6: 01      			db 		1									; $20 (dictionary) [1 = system]
88E7: 02      			db 		2 									; $22 (first code) [2 = code]
88E8: 00000000			db 		0,0,0,0,0,0 						; $24-$2E 		   [0 = unused]
88EC: 0000    	
88EE: 00000000			db 		0,0,0,0,0,0,0,0 					; $30-$3E
88F2: 00000000	
88F6: 00000000			db 		0,0,0,0,0,0,0,0 					; $40-$4E
88FA: 00000000	
88FE: 00000000			db 		0,0,0,0,0,0,0,0 					; $50-$5E
8902: 00000000	
8906: FF      			db 		$FF 								; end of page.
              			
8907: FFFFFFFF			org 	$A000
890B: FF...   	
A000:         	FreeMemory:		
              	
A000: FFFFFFFF				org 	$C000
A004: FF...   	
C000: 00      				db 		0 								; start of dictionary, which is empty.
              	


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont                            = $8306 = 33542          kernel.asm:51
Boot                                     = $8006 = 32774          kernel.asm:33
DIVDivideMod16                           = $803C = 32828          divide.asm:18
DebugShow                                = $86CE = 34510          __words.asm:301 (unused)
DictionaryPage                           = $0020 =    32          kernel.asm:14 (unused)
Div16_Loop1                              = $8046 = 32838          divide.asm:27
Div16_Loop2                              = $8057 = 32855          divide.asm:41
Div16_NoAdd1                             = $804E = 32846          divide.asm:33
Div16_NoAdd2                             = $805F = 32863          divide.asm:47
FirstCodePage                            = $0022 =    34          kernel.asm:15
FreeMemory                               = $A000 = 40960          data.asm:62
HaltZ80                                  = $8761 = 34657          __words.asm:422
IOColour                                 = $88E5 = 35045          data.asm:49
IOScanKeyboard                           = $8067 = 32871          keyboard.asm:18
IOScreenPosition                         = $88E3 = 35043          data.asm:47
L2PClear                                 = $81B5 = 33205          screen_layer2.asm:25
L2PClearBank                             = $81C4 = 33220          screen_layer2.asm:33
LowClearScreen                           = $8275 = 33397          screen_lores.asm:30
LowPrintCharacter                        = $828C = 33420          screen_lores.asm:50
MULTMultiply16                           = $8022 = 32802          multiply.asm:18
PageUsage                                = $88E6 = 35046          data.asm:52
PrintCharacter                           = $876B = 34667          __words.asm:442
PrintHexByte                             = $8738 = 34616          __words.asm:380
PrintHexWord                             = $872A = 34602          __words.asm:367 (unused)
PrintString                              = $877F = 34687          __words.asm:461 (unused)
SIBootCodeAddress                        = $88C3 = 35011          data.asm:24
SIBootCodePage                           = $88C7 = 35015          data.asm:26
SIFontBase                               = $88DF = 35039          data.asm:38
SINextFreeCode                           = $88BB = 35003          data.asm:20 (unused)
SINextFreeCodePage                       = $88BF = 35007          data.asm:22 (unused)
SIPageUsage                              = $88CF = 35023          data.asm:30 (unused)
SIScreenDriver                           = $88DB = 35035          data.asm:36
SIScreenHeight                           = $88D7 = 35031          data.asm:34
SIScreenWidth                            = $88D3 = 35027          data.asm:32
SIStack                                  = $88CB = 35019          data.asm:28
SetMode_Layer2                           = $81AC = 33196          screen_layer2.asm:18
SetMode_LowRes                           = $8262 = 33378          screen_lores.asm:18
SetMode_Spectrum48k                      = $8134 = 33076          screen48k.asm:19
SetScreenMode48kSpectrum                 = $8794 = 34708          __words.asm:490
SetScreenModeLayer2                      = $87AE = 34734          __words.asm:510 (unused)
SetScreenModeLowRes                      = $87C8 = 34760          __words.asm:530 (unused)
StackTop                                 = $7EF0 = 32496          kernel.asm:12
SystemInformation                        = $88BB = 35003          data.asm:18
WriteCharacter                           = $87E9 = 34793          __words.asm:568
WriteCharacter_Layer2                    = $81DC = 33244          screen_layer2.asm:54
WriteCharacter_Spectrum48k               = $8160 = 33120          screen48k.asm:53
__COMFalse                               = $8622 = 34338          __words.asm:48
__COMP_GT                                = $8626 = 34342          __words.asm:57
__COMP_LE                                = $8643 = 34371          __words.asm:90
__COMTrue                                = $861E = 34334          __words.asm:45
__Core__Mult_Loop                        = $8029 = 32809          multiply.asm:24
__Core__Mult_Shift                       = $802E = 32814          multiply.asm:28
__DHN2                                   = $8721 = 34593          __words.asm:355
__DisplayHexByte                         = $8709 = 34569          __words.asm:340
__DisplayHexInteger                      = $86F9 = 34553          __words.asm:329
__DisplayHexNibble                       = $8716 = 34582          __words.asm:348
__Greater                                = $8633 = 34355          __words.asm:64
__IOASCIIExit                            = $878A = 34698          __words.asm:470
__IOASCIIZ                               = $8780 = 34688          __words.asm:463
__L2Exit                                 = $825B = 33371          screen_layer2.asm:154
__L2Loop                                 = $824C = 33356          screen_layer2.asm:141
__L2Not1                                 = $81F7 = 33271          screen_layer2.asm:75
__L2Not2                                 = $81FD = 33277          screen_layer2.asm:79
__L2Not3                                 = $8203 = 33283          screen_layer2.asm:83
__L2NotCursor                            = $820E = 33294          screen_layer2.asm:92
__L2NotSet                               = $8252 = 33362          screen_layer2.asm:146
__L2Outer                                = $8243 = 33347          screen_layer2.asm:135
__LPExit                                 = $82FF = 33535          screen_lores.asm:142
__LessEqual                              = $8650 = 34384          __words.asm:97
__LowLoop                                = $82EB = 33515          screen_lores.asm:126
__LowNotLower2                           = $82E0 = 33504          screen_lores.asm:118
__LowNotReverse                          = $82AD = 33453          screen_lores.asm:78
__LowNotSet                              = $82F1 = 33521          screen_lores.asm:131
__LowOuter                               = $82E2 = 33506          screen_lores.asm:120
__Max2                                   = $889E = 34974          __words.asm:964
__Min2                                   = $88AF = 34991          __words.asm:984
__PNIsDigit                              = $874D = 34637          __words.asm:393
__PrintNibble                            = $8745 = 34629          __words.asm:388
__WCContinue                             = $87F6 = 34806          __words.asm:577
__ZXWCCopy                               = $81A0 = 33184          screen48k.asm:115
__ZXWCExit                               = $81A7 = 33191          screen48k.asm:122
___kr4                                   = $8098 = 32920          keyboard.asm:49
__copy2                                  = $86C5 = 34501          __words.asm:287
__copyExit                               = $86C1 = 34497          __words.asm:282
__cs1                                    = $8144 = 33092          screen48k.asm:29
__cs2                                    = $814C = 33100          screen48k.asm:34
__fill1                                  = $8757 = 34647          __words.asm:407
__kr1                                    = $807C = 32892          keyboard.asm:32
__kr2                                    = $8087 = 32903          keyboard.asm:38
__kr3                                    = $8089 = 32905          keyboard.asm:41
__kr_exit                                = $80B8 = 32952          keyboard.asm:79
__kr_keypressed                          = $80B2 = 32946          keyboard.asm:73
__kr_no_shift_table                      = $80BC = 32956          keyboard.asm:94
__kr_shift_table                         = $810C = 33036          keyboard.asm:106
__kr_symbol_shift_table                  = $80E4 = 32996          keyboard.asm:100
__mzdefine_21_3a_3a_6d                   = $86A5 = 34469          __words.asm:237 (unused)
__mzdefine_21_3a_3a_6d_end               = $86A9 = 34473          __words.asm:242 (unused)
__mzdefine_2a_3a_3a_77                   = $865E = 34398          __words.asm:116 (unused)
__mzdefine_2b_21_3a_3a_77                = $8683 = 34435          __words.asm:175 (unused)
__mzdefine_2b_3a_3a_6d                   = $8606 = 34310          __words.asm:5 (unused)
__mzdefine_2b_3a_3a_6d_end               = $8607 = 34311          __words.asm:7 (unused)
__mzdefine_2d_3a_3a_6d                   = $8675 = 34421          __words.asm:149 (unused)
__mzdefine_2d_3a_3a_6d_end               = $867B = 34427          __words.asm:155 (unused)
__mzdefine_2e_68_65_78_3a_3a_77          = $872A = 34602          __words.asm:366 (unused)
__mzdefine_2f_3a_3a_77                   = $860F = 34319          __words.asm:27 (unused)
__mzdefine_30_2d_3a_3a_77                = $8838 = 34872          __words.asm:775 (unused)
__mzdefine_30_3c_3a_3a_77                = $8830 = 34864          __words.asm:764 (unused)
__mzdefine_30_3d_3a_3a_77                = $8828 = 34856          __words.asm:752 (unused)
__mzdefine_31_2b_3a_3a_6d                = $8858 = 34904          __words.asm:825 (unused)
__mzdefine_31_2b_3a_3a_6d_end            = $8859 = 34905          __words.asm:827 (unused)
__mzdefine_31_2d_3a_3a_6d                = $8856 = 34902          __words.asm:816 (unused)
__mzdefine_31_2d_3a_3a_6d_end            = $8857 = 34903          __words.asm:818 (unused)
__mzdefine_31_36_2a_3a_3a_6d             = $8851 = 34897          __words.asm:804 (unused)
__mzdefine_31_36_2a_3a_3a_6d_end         = $8855 = 34901          __words.asm:809 (unused)
__mzdefine_31_36_2f_3a_3a_77             = $8840 = 34880          __words.asm:789 (unused)
__mzdefine_32_2a_3a_3a_6d                = $8871 = 34929          __words.asm:886 (unused)
__mzdefine_32_2a_3a_3a_6d_end            = $8872 = 34930          __words.asm:888 (unused)
__mzdefine_32_2b_3a_3a_6d                = $886E = 34926          __words.asm:876 (unused)
__mzdefine_32_2b_3a_3a_6d_end            = $8870 = 34928          __words.asm:879 (unused)
__mzdefine_32_2d_3a_3a_6d                = $886B = 34923          __words.asm:866 (unused)
__mzdefine_32_2d_3a_3a_6d_end            = $886D = 34925          __words.asm:869 (unused)
__mzdefine_32_2f_3a_3a_6d                = $8866 = 34918          __words.asm:856 (unused)
__mzdefine_32_2f_3a_3a_6d_end            = $886A = 34922          __words.asm:859 (unused)
__mzdefine_32_35_36_2a_3a_3a_6d          = $8862 = 34914          __words.asm:846 (unused)
__mzdefine_32_35_36_2a_3a_3a_6d_end      = $8865 = 34917          __words.asm:849 (unused)
__mzdefine_32_35_36_2f_3a_3a_77          = $885A = 34906          __words.asm:834 (unused)
__mzdefine_34_2a_3a_3a_6d                = $887C = 34940          __words.asm:906 (unused)
__mzdefine_34_2a_3a_3a_6d_end            = $887E = 34942          __words.asm:909 (unused)
__mzdefine_34_2f_3a_3a_77                = $8873 = 34931          __words.asm:895 (unused)
__mzdefine_38_2a_3a_3a_6d                = $887F = 34943          __words.asm:916 (unused)
__mzdefine_38_2a_3a_3a_6d_end            = $8882 = 34946          __words.asm:920 (unused)
__mzdefine_3b_3a_3a_6d_70                = $87E2 = 34786          __words.asm:549 (unused)
__mzdefine_3b_3a_3a_6d_70_end            = $87E3 = 34787          __words.asm:551 (unused)
__mzdefine_3c_3a_3a_77                   = $863F = 34367          __words.asm:81 (unused)
__mzdefine_3c_3d_3a_3a_77                = $8643 = 34371          __words.asm:89 (unused)
__mzdefine_3c_3e_3a_3a_77                = $8661 = 34401          __words.asm:123 (unused)
__mzdefine_3d_3a_3a_77                   = $8616 = 34326          __words.asm:38 (unused)
__mzdefine_3e_3a_3a_77                   = $8626 = 34342          __words.asm:56 (unused)
__mzdefine_3e_3d_3a_3a_77                = $863B = 34363          __words.asm:73 (unused)
__mzdefine_40_3a_3a_6d                   = $868C = 34444          __words.asm:190 (unused)
__mzdefine_40_3a_3a_6d_end               = $8690 = 34448          __words.asm:195 (unused)
__mzdefine_61_3e_62_3a_3a_6d             = $8801 = 34817          __words.asm:608 (unused)
__mzdefine_61_3e_62_3a_3a_6d_end         = $8803 = 34819          __words.asm:611 (unused)
__mzdefine_61_3e_63_3a_3a_6d             = $8804 = 34820          __words.asm:618 (unused)
__mzdefine_61_3e_63_3a_3a_6d_end         = $8806 = 34822          __words.asm:621 (unused)
__mzdefine_61_3e_72_3a_3a_6d_70          = $8807 = 34823          __words.asm:628 (unused)
__mzdefine_61_3e_72_3a_3a_6d_70_end      = $8808 = 34824          __words.asm:630 (unused)
__mzdefine_61_62_3e_72_3a_3a_6d_70       = $87FE = 34814          __words.asm:598 (unused)
__mzdefine_61_62_3e_72_3a_3a_6d_70_end   = $8800 = 34816          __words.asm:601 (unused)
__mzdefine_61_62_63_3e_72_3a_3a_6d_70    = $87FA = 34810          __words.asm:587 (unused)
__mzdefine_61_62_63_3e_72_3a_3a_6d_70_end = $87FD = 34813          __words.asm:591 (unused)
__mzdefine_61_62_73_3a_3a_77             = $8883 = 34947          __words.asm:927 (unused)
__mzdefine_61_6e_64_3a_3a_77             = $8608 = 34312          __words.asm:14 (unused)
__mzdefine_62_3e_61_3a_3a_6d             = $8809 = 34825          __words.asm:637 (unused)
__mzdefine_62_3e_61_3a_3a_6d_end         = $880B = 34827          __words.asm:640 (unused)
__mzdefine_62_3e_63_3a_3a_6d             = $880C = 34828          __words.asm:647 (unused)
__mzdefine_62_3e_63_3a_3a_6d_end         = $880E = 34830          __words.asm:650 (unused)
__mzdefine_62_3e_72_3a_3a_6d_70          = $880F = 34831          __words.asm:657 (unused)
__mzdefine_62_3e_72_3a_3a_6d_70_end      = $8810 = 34832          __words.asm:659 (unused)
__mzdefine_62_72_65_61_6b_3a_3a_6d_70    = $86AC = 34476          __words.asm:258 (unused)
__mzdefine_62_72_65_61_6b_3a_3a_6d_70_end = $86AE = 34478          __words.asm:260 (unused)
__mzdefine_62_73_77_61_70_3a_3a_6d       = $888E = 34958          __words.asm:943 (unused)
__mzdefine_62_73_77_61_70_3a_3a_6d_end   = $8891 = 34961          __words.asm:947 (unused)
__mzdefine_63_21_3a_3a_6d                = $86AA = 34474          __words.asm:249 (unused)
__mzdefine_63_21_3a_3a_6d_end            = $86AB = 34475          __words.asm:251 (unused)
__mzdefine_63_3e_61_3a_3a_6d             = $8811 = 34833          __words.asm:666 (unused)
__mzdefine_63_3e_61_3a_3a_6d_end         = $8813 = 34835          __words.asm:669 (unused)
__mzdefine_63_3e_62_3a_3a_6d             = $8814 = 34836          __words.asm:676 (unused)
__mzdefine_63_3e_62_3a_3a_6d_end         = $8816 = 34838          __words.asm:679 (unused)
__mzdefine_63_3e_72_3a_3a_6d_70          = $8817 = 34839          __words.asm:686 (unused)
__mzdefine_63_3e_72_3a_3a_6d_70_end      = $8818 = 34840          __words.asm:688 (unused)
__mzdefine_63_40_3a_3a_6d                = $8691 = 34449          __words.asm:202 (unused)
__mzdefine_63_40_3a_3a_6d_end            = $8694 = 34452          __words.asm:205 (unused)
__mzdefine_63_6f_70_79_3a_3a_77          = $86AF = 34479          __words.asm:267 (unused)
__mzdefine_64_65_62_75_67_3a_3a_77       = $86CE = 34510          __words.asm:300 (unused)
__mzdefine_66_69_6c_6c_3a_3a_77          = $8752 = 34642          __words.asm:401 (unused)
__mzdefine_68_61_6c_74_3a_3a_77          = $8761 = 34657          __words.asm:421 (unused)
__mzdefine_69_6e_6b_65_79_3a_3a_77       = $878C = 34700          __words.asm:478 (unused)
__mzdefine_69_6f_2e_63_6f_6c_6f_75_72_3a_3a_77 = $8765 = 34661          __words.asm:431 (unused)
__mzdefine_69_6f_2e_65_6d_69_74_3a_3a_77 = $876A = 34666          __words.asm:440 (unused)
__mzdefine_69_6f_2e_70_72_69_6e_74_2e_73_74_72_69_6e_67_3a_3a_77 = $877F = 34687          __words.asm:460 (unused)
__mzdefine_69_6f_2e_77_72_69_74_65_2e_63_68_61_72_61_63_74_65_72_3a_3a_77 = $87E9 = 34793          __words.asm:567 (unused)
__mzdefine_6d_61_78_3a_3a_77             = $8892 = 34962          __words.asm:954 (unused)
__mzdefine_6d_69_6e_3a_3a_77             = $88A3 = 34979          __words.asm:974 (unused)
__mzdefine_6d_6f_64_3a_3a_77             = $8658 = 34392          __words.asm:106 (unused)
__mzdefine_6e_6f_74_3a_3a_77             = $88B4 = 34996          __words.asm:994 (unused)
__mzdefine_6f_72_3a_3a_77                = $866E = 34414          __words.asm:136 (unused)
__mzdefine_70_21_3a_3a_77                = $869E = 34462          __words.asm:225 (unused)
__mzdefine_70_40_3a_3a_77                = $8695 = 34453          __words.asm:212 (unused)
__mzdefine_72_3e_61_3a_3a_6d_70          = $8819 = 34841          __words.asm:695 (unused)
__mzdefine_72_3e_61_3a_3a_6d_70_end      = $881A = 34842          __words.asm:697 (unused)
__mzdefine_72_3e_61_62_3a_3a_6d_70       = $881B = 34843          __words.asm:704 (unused)
__mzdefine_72_3e_61_62_3a_3a_6d_70_end   = $881D = 34845          __words.asm:707 (unused)
__mzdefine_72_3e_61_62_63_3a_3a_6d_70    = $881E = 34846          __words.asm:714 (unused)
__mzdefine_72_3e_61_62_63_3a_3a_6d_70_end = $8821 = 34849          __words.asm:718 (unused)
__mzdefine_72_3e_62_3a_3a_6d_70          = $8822 = 34850          __words.asm:725 (unused)
__mzdefine_72_3e_62_3a_3a_6d_70_end      = $8823 = 34851          __words.asm:727 (unused)
__mzdefine_72_3e_63_3a_3a_6d_70          = $8824 = 34852          __words.asm:734 (unused)
__mzdefine_72_3e_63_3a_3a_6d_70_end      = $8825 = 34853          __words.asm:736 (unused)
__mzdefine_73_63_72_65_65_6e_2e_6d_6f_64_65_2e_34_38_6b_3a_3a_77 = $8794 = 34708          __words.asm:489 (unused)
__mzdefine_73_63_72_65_65_6e_2e_6d_6f_64_65_2e_6c_61_79_65_72_32_3a_3a_77 = $87AE = 34734          __words.asm:509 (unused)
__mzdefine_73_63_72_65_65_6e_2e_6d_6f_64_65_2e_6c_6f_77_72_65_73_3a_3a_77 = $87C8 = 34760          __words.asm:529 (unused)
__mzdefine_73_77_61_70_3a_3a_6d          = $8826 = 34854          __words.asm:743 (unused)
__mzdefine_73_77_61_70_3a_3a_6d_end      = $8827 = 34855          __words.asm:745 (unused)
__mzdefine_73_79_73_2e_69_6e_66_6f_3a_3a_77 = $87E4 = 34788          __words.asm:558 (unused)
__mzdefine_78_6f_72_3a_3a_77             = $867C = 34428          __words.asm:162 (unused)
_end                                     = $C001 = 49153          kernel.asm:27 (unused)
_size                                    = $4001 = 16385          kernel.asm:27 (unused)


total time: 0.0088 sec.
no errors
